{"version":3,"file":"not.min.js","sources":["../index.js"],"sourcesContent":["/*!\n * You-Are-Not v0.3.1\n * (c) 2020 Calvin Tan\n * Released under the MIT License.\n */\n'use strict'\n\nconst You = {\n    opinionatedOnNaN: true,\n    opinionatedOnArray: true,\n    opinionatedOnNull: true,\n    opinionatedOnString: true,\n    _isOpinionated: true,\n    willThrowError: true\n}\n\nObject.defineProperty(You, 'isOpinionated', {\n    get() { return this._isOpinionated },\n    set(value) {\n        this._isOpinionated = value\n        this.opinionatedOnNaN = value\n        this.opinionatedOnArray = value\n        this.opinionatedOnNull = value\n        this.opinionatedOnString = value\n    }\n})\n\nYou.areNot = function(expect, got, name, note) {\n    if (!Array.isArray(expect)) expect = [expect]\n    got = this.type(got)\n    if (this.found(expect, got)) return false\n    let msg = this.msg(expect, got, name, note)\n    if (this.willThrowError) throw TypeError(msg)\n    return msg\n}\n\nYou.isNot = function(expect, got, name, note) {\n    return this.areNot(expect, got, name, note)\n}\nYou.not = function(expect, got, name, note) {\n    return this.areNot(expect, got, name, note)\n}\n\nYou.are = function(expect, got) {\n    try {\n        let chk = this.areNot(expect, got)\n        if (typeof chk === 'string') return false\n        return true\n    } catch (error) { return false }\n}\n\nYou.is = function(expect, got) {\n    return this.are(expect, got)\n}\n\nYou.found = function(expect, got) {\n    if (typeof got == 'string') got = [got]\n    let found = expect.find(el => got.indexOf(this.vet(el)) !== -1 )\n    return typeof found !== 'undefined'\n}\n\nYou.msg = function(expect, got, name, note) {\n    let msg = 'Wrong Type' // type error, invalid argument, validation error... have been considered. 'Wrong Type' sounds most simple.\n    msg += name ? ` (${name})` : ''\n    msg += `: Expecting type ${this.list(expect)} but got ${this.list(got)}.`\n    msg += note ? ` Note: ${note}.` : ''\n    return msg\n}\n\nYou.vet = function(el) {\n    const valid = [\n        'string',\n        'number',\n        'nan', // this is an opinion. NaN should not be of type number in the literal sense.\n        'array',\n        'object',\n        'function',\n        'boolean',\n        'null',\n        'undefined'\n        // no support for symbol. should we care?\n    ]\n    if (typeof el !== 'string') throw TypeError(`Internal error: Say what you expect to check as a string. Found ${this.list(this.type(el), 'as')}.`)\n    if (valid.indexOf(el.toLowerCase()) === -1) throw Error(`Internal error: \\`${el}\\` is not a valid type to check for. Please use only ${this.list(valid)}.`)\n    return el\n}\n\nYou.list = function(array, conjunction) {\n    if (!conjunction) conjunction = 'or'\n    if (typeof array === 'string') array = [array]\n    array = array.map(el => {\n        return `\\`${el.toLowerCase()}\\``\n    })\n    if (array.length === 1) return array[0]\n    if (array.length === 2) return array.join(` ${conjunction} `)\n    return `${array.slice(0, -1).join(', ')} ${conjunction} ${array.slice(-1)}`\n}\n\nYou.type = function(got) {\n\n    // sort out the NaN problem.\n    if (typeof got !== 'object') {\n        if (typeof got === 'number' && isNaN(got)) {\n            if (this.opinionatedOnNaN) {\n                return 'nan'\n            } else {\n                return ['nan', 'number']\n            }\n        }\n        // everything else is in the clear\n        return typeof got\n    }\n\n    // objects... get rid of all the problems typeof [] or null is `object`.\n    if (Array.isArray(got)) {\n        if (this.opinionatedOnArray) {\n            return 'array'\n        } else {\n            return ['array', 'object']\n        }\n    }\n    if (got === null) {\n        if (this.opinionatedOnNull) {\n            return 'null'\n        } else {\n            return ['null', 'object']\n        }\n    }\n\n    if (got instanceof String) {\n        if (this.opinionatedOnString) {\n            return 'string'\n        } else {\n            return ['string', 'object']\n        }\n    }\n    return 'object'\n}\n\nYou.lodge = function(expect, got, name, note) {\n    // when using ingest you want to mute throwing errors.\n    this._oldValue_willThrowError = this.willThrowError\n    this.willThrowError = false\n\n    if (!this._lodged) this._lodged = []\n    let ingestation = this.areNot(expect, got, name, note)\n    if (ingestation) this._lodged.push(ingestation)\n\n    // revert\n    this.willThrowError = this._oldValue_willThrowError\n    this._oldValue_willThrowError = null\n}\n\nYou.resolve = function(callback) {\n    if (this._lodged === undefined || this._lodged.length === 0) return false\n    let errors = TypeError('Wrong types provided. See `trace`.')\n    errors.trace = this._lodged\n    if (typeof callback === 'function') return callback(errors)\n    if (this.willThrowError) throw errors\n    return errors.trace\n}\n\nYou.create = function(options) {\n    let you = Object.create(this)\n    this._applyOptions(you, options)\n    return you.areNot.bind(you)\n}\n\nYou.createNot = function(options) {\n    return this.create(options)\n}\nYou.createIs = function(options) {\n    let you = Object.create(this)\n    this._applyOptions(you, options)\n    return you.are.bind(you)\n}\nYou._applyOptions = function (instance, options) {\n    if (this.__proto__.is === undefined) throw Error('You are directly using the prototype which is not allowed. Please use #Object.create() to extend this prototype.')\n    if(this.__proto__.is('object', options)) {\n        if(this.__proto__.is('boolean', options.opinionatedOnNaN)) instance.opinionatedOnNaN = options.opinionatedOnNaN\n        if(this.__proto__.is('boolean', options.opinionatedOnArray)) instance.opinionatedOnArray = options.opinionatedOnArray\n        if(this.__proto__.is('boolean', options.opinionatedOnNull)) instance.opinionatedOnNull = options.opinionatedOnNull\n        if(this.__proto__.is('boolean', options.opinionatedOnString)) instance.opinionatedOnString = options.opinionatedOnString\n        if(this.__proto__.is('boolean', options.isOpinionated)) instance.isOpinionated = options.isOpinionated\n        if(this.__proto__.is('boolean', options.willThrowError)) instance.willThrowError = options.willThrowError\n    }\n}\n\nexport default Object.create(You)\n"],"names":["You","opinionatedOnNaN","opinionatedOnArray","opinionatedOnNull","opinionatedOnString","_isOpinionated","willThrowError","Object","defineProperty","get","this","set","value","areNot","expect","got","name","note","Array","isArray","type","found","msg","TypeError","isNot","not","are","error","is","find","el","indexOf","_this","vet","list","valid","toLowerCase","Error","array","conjunction","map","length","join","slice","_typeof","isNaN","String","lodge","_oldValue_willThrowError","_lodged","ingestation","push","resolve","callback","undefined","errors","trace","create","options","you","_applyOptions","bind","createNot","createIs","instance","__proto__","isOpinionated"],"mappings":"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"}